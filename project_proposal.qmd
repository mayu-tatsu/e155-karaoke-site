---
title: "Project Proposal"

tbl-cap-location: bottom
---

## Project Overview
This project seeks to emulate a karaoke machine by allowing a user to select from a set list of songs and displaying appropriately-timed lyrics accordingly. Once the song has finished, the project will grade the user's performance — with both a numeric score and letter grade — based on how on-pitch they are.

To be more specific, this will be done by sampling the user's singing with the FPGA and a MEMS PDM microphone, during which the former will perform decimation (see [New FPGA Functionality](#sec-new-fpga-functionality)) on the digital output of the mic, bringing the sample rate down to 16 kHz. 
Then, the FPGA will send this processed information to the MCU via SPI communication, so that it can further process such with FFT computations. It will also handle the storage of expected and detected notes throughout each song.
Finally, the MCU will communicate with an LCD over I2C to display the corresponding lyrics of whatever song the user has chosen to sing and display the final score of the user's performance.


## Specifications
* Design allows the user to choose a song through external hardware
* Design detects input notes between A3 and roughly B5 (220 Hz to 1000 Hz)
* Design scores the user’s singing by comparing detected and expected notes
* Design plays back the expected song through a speaker as reference
* Design utilizes a pitch and delay media format (as seen in Fur Elise, Lab 4)
* Displays properly-timed lyrics/notes on an LCD screen
* LCD display does not flicker


## Project Management
### Bill of Materials
| **Part Name**                         | **Part Number**                                                                                   | **Quantity** | **Price**                                                   | **Vendor**                                                  |
|:-------------------------------------:|:-------------------------------------------------------------------------------------------------:|:------------:|:-----------------------------------------------------------:|:-----------------------------------------------------------:|
| Adafruit PDM MEMS Microphone Breakout | [MP34DT01-M](https://www.st.com/en/audio-ics/mp34dt01-m.html)                                     | 1            | $11.23 *($4.95 part, $6.28 shipping + tax)*                 | [Adafruit](https://www.adafruit.com/product/3492)           |
| Hosyond I2C 2004 LCD Module           | [HD44780U](https://dfimg.dfrobot.com/enshop/image/data/DFR0154/LCD2004%20hd44780%20Datasheet.pdf) | 1            | $26.32 *($16.99 part, $6.99 shipping, $2.34 estimated tax)* | [Amazon](https://www.amazon.com/gp/product/B0C1G9GBRZ?th=1) |
| Capacitor                             | 100nF Ceramic Capacitor                                                                           | 1            | $0                                                          | Stockroom                                                   |
| **TOTAL**                             |                                                                                                   |              | $37.55                                                      |                                                             |
: Bill of materials {#tbl-bom}

Note that if the team discovers that they need any additional, basic resources (such as resistors, capacitors, etc.) later on in the project, these will be taken from either the Engineering Stockroom or Digital Lab at no cost.

### Timeline
|                            | **Task(s)**                                       | **Date** |
|:--------------------------:|:-------------------------------------------------:|:--------:|
| *Project proposal*         | Finish project proposal                           | 10/16/25 |
|                            | Start project                                     | 10/30/25 |
|                            | Study PDM to PCM decimation                       | 11/6/25  |
| *Design review*            | Prepare slides for design review                  | 11/7/25  |
|                            | Implement new decimation FPGA functionality       | 11/13/25 |
| *Midpoint report and demo* | Finish midpoint report and prepare demo           | 11/16/25 |
|                            | Detect all input notes accurately with microphone | 11/20/25 |
|                            | Synchronize LCD output notes/lyrics with song(s)  | 11/27/25 |
|                            | Polish off project's final appearance             | 12/3/25  |
| *Final checkoff*           | Finish project completely                         | 12/5/25  |
| *Final report*             | Finish final report                               | 12/7/25  |
| *Demo day*                 |                                                   | 12/8/25  |
: Rough timeline with key dates {#tbl-timeline}

### Task Delegation
+-------------------------------------------+-------------------------------------------+
| **Mayu**                                  | **Quinn**                                 |
+:==========================================+:==========================================+
| - Study PDM to PCM decimation             | - Study PDM to PCM decimation             |
+-------------------------------------------+-------------------------------------------+
| - Start FPGA code                         | - Start LCD code                          |
|                                           | - Transcribe song(s)                      |
+-------------------------------------------+-------------------------------------------+
| - Check LCD code                          | - Check FPGA code                         |
+-------------------------------------------+-------------------------------------------+
| - Study FFT calculations and libraries    | - Study FFT calculations and libraries    |
+-------------------------------------------+-------------------------------------------+
| - Decide on interrupts and timers for MCU | - Decide on interrupts and timers for MCU |
+-------------------------------------------+-------------------------------------------+
| - Assemble circuit                        | - Check circuit                           |
+-------------------------------------------+-------------------------------------------+
| - Write verification                      | - Write verification                      |
+-------------------------------------------+-------------------------------------------+
| - Write Documentation                     | - Write Documentation                     |
+-------------------------------------------+-------------------------------------------+
: Task delegation {#tbl-task-delegation}

Overall, the team hopes to complete the vast majority of the project's tasks together, so as to receive an equal and holistic learning experience.


## Design Details
### New MCU Functionality
The new MCU functionality intended to be used is the DMA peripheral to onload buffered data for the PCM data coming in from the FPGA through SPI protocol.

### New FPGA Functionality {#sec-new-fpga-functionality}
The new FPGA functionality intended to be used is decimation.
In short, decimation is a term in (digital) signal processing that describes the removal of samples so as to reduce the complexity of subsequent computations.

### New Non-Trivial Hardware
The two new, non-trivial pieces of hardware that will be used in this project are the Hoysond LCD module and the Adafruit PDM microphone.

### Riskiest Element
The riskiest element of the project will be the microphone. We are not sure how accurate it will be able to process sounds and output a solid PDM. It is also important to note that we will be demoing the design during a noisy lab room, so we are expecting difficulty in isolating the singing. We will attempt to mitigate the risks by implementing a sigma-delta modulator that we can control via switch.


## Technical Documentation
### Block Diagram
![Block diagram](images/project_proposal_block_diagram.jpg){#fig-block-diagram}

The block diagram depicted in [Figure 1](#fig-block-diagram) provides a general outline of all protocols and interfaces that the project will comprise.

### Calculations of Critical Parameters
#### PDM to PCM Decimation Parameters (Filter Design)
Page four of the [MP34DT01-M datasheet](https://cdn-learn.adafruit.com/assets/assets/000/049/977/original/MP34DT01-M.pdf) gives the following values:

**Clock** (@ $Vdd=1.8V$, $T=25\degree C$) = 2.4 MHz (Min. 1 MHz, Max. 3.25 MHz)  
**AOP** (Acoustic Overload Point) = 120 dBSPL  
**SNR** (Signal-to-Noise Ratio) = 61 dB  
**Dynamic Range** = SNR + (AOP - 94 dbSPL) = 61 dB + (120 dbSPL - 94 dbSPL) = 87 bB  
- Assuming that there is ~6 dB per bit (realistically 6.2 per bit but rounding down), the design will need a **PCM word size** of at least **15 bits** to cover the full dynamic range of the microphone. ($87/6=14.5$, round up to 15 bits)

Thus, the values the team decided on are:

**Output Sample Rate**: 16 kHz → **Bandwidth / Nyquist**: 8 kHz  
- Most fundamental frequencies and harmonics of human singing fall below 8 kHz, and setting the Nyquist value at 16 kHz comfortably covers this band.
- This has a lower processing and memory cost compared to standard 48 kHz audio.  
- FFT frequency bins and time resolution are balanced at this sample rate for pitch detection and scoring (see below!).  
**PDM Sample Rate**: 2.304 MHz  
- Based on clock range: 1 - 3.25 MHz  
- Power of 2: Important for decimation ratio --> Multi-stage decimation.  
**Decimation Ratio**: $2304 kHz / 16 kHz = 144$  

![Frequency response diagram](images/mic-freq-response.png){#fig-freq-response width=70%}

Observing the diagram provided in [Figure 2](#fig-freq-response) above, after 6 kHz, the frequency response starts becoming a lot more sensitive. It's a pass until then, and then the transition band starts from there. Beyond 10 kHz, the frequency response data isn't displayed, so assuming the worst case scenario, the stop band should start from there. 

**Pass-band**: 0 - 6 kHz  
**Stop Band**: 10 kHz  
**SNR of Output Signal**: 80 dB  
- Humans can’t detect signals beyond 70 dB.
- Allowing for increased SNR deterioration (of around 7 dB from 87 dB), the team can balance out the computational usage to quality required for a karaoke machine.  
**Max. Ripple**: +/- 1 dB  
- Individual filters will need to have tighter specs than this overall maximum 1 dB ripple, so for less load, it’s relaxed compared to the high quality audio standard of 0.1 dB.  
**Stop Band Attenuation** = 60 dB  
- Worst-case assumption: PDM noise above 8 kHz (Nyquist) = −40 dB per 16 kHz band

```default
# all Hz
fPDM      = 2.304e6
fPDM/2    = 1.152e6
fs        = 16e3
fs/2      = 8e3

N_bands   = floor((1.152e6 - 8e3)/16e3) = 71

SNR_before   = 87   # dB
SNR_after    = 80   # dB
decimation_r = fPDM / fs = 144

P_signal                      = 1                           # normalized signal power
P_native_noise_before         = 10^(-87/10) = 1.9953e-9     # intrinsic mic noise power
P_total_noise_allowed         = 10^(-80/10) = 1.0000e-8     # total noise after filtering
P_aliasing_noise_allowed      = P_total_noise_allowed - P_native_noise_before
                              = 8.0047e-9   # max allowed aliased noise after filtering

# per-band assumption: -40 dB  (per 16-kHz band above 8 kHz)
P_aliasing_noise_before_per_band = 10^(-40/10) = 0.0001
P_aliasing_noise_before_total    = 0.P_aliasing_noise_before_per_band * N_bands = 0.0071

A_stop_lin = 0.0071 / 8.0047e-9 = 8.873e5
A_stop_db  = 10 * log10(A_stop_lin) = 59.5               # ~60 dB stop-band attenuation required 

```


##### LUT Usage
Preliminary order-of-magnitude calculations are based on this blog, but will be tweaked later: [Design of a Multi-Stage PDM to PCM Decimation Pipeline](https://tomverbeure.github.io/2020/12/20/Design-of-a-Multi-Stage-PDM-to-PCM-Decimation-Pipeline.html)

Following the 144 decimation ratio, CIC can handle a maximum of 12x decimation (the bulk of decimation) with four stages and has 0.056 dB passband ripple and 125.8 dB stopband attenuation. The team will use two cascaded half-band filters: HB1 with 4x decimation and HB2 3x. Each roughly has a ~0.02 dB passband ripple and 89 dB attenuation. At the end, a generic FIR filter minimizes ripple by having a flat passband that counteracts the CIC passband droop (“compensation filter”). It also enforces stopband attenuation to a value higher than 60 dB (already achieved!), and as with the role of an FIR filter, it has 1x decimation.

* CIC Filter (12x in 4 stages): 
    + Uses only adders and delays, no multipliers.
    + Adders: 1 LUT per 4-5 adder bits, 20 adder bits * 4 stages = 20 LUTs
        - 20 adder bits comes from = Input Bit Width + Stages * log_2(CIC Decimation Ratio) = $1+4*log_2(12) = 16$, adding 4 guard bits.
    + Registers: 52 registers (FFs) where 1 FF = 1 LUT.
        - Comes from 4 stages, each with 1 integrator and 12 combs = 52 LUTs.
    + Overhead: 20% of preliminary cost = 15 LUTs
    + Total: Roughly **90 LUTs**
* Half-Band Filters:
    + Uses multipliers but FPGA can optimize and conver them to shifters/adders since half of taps are zero & nonzero coefficients are usually multiples of 2.
    + HB1: 4x
        - Converting taps to shift-adding is most efficient, but some might not always be possible. Worst case scenario, all taps will be via multiplication.
        - Adders: 64 total taps --> 32 nonzero coefficients, where each shift/adder is around 5 LUTs = 160 LUTs
        - Multiplication: Worst case all taps are required to use multiplication: we use 4 DSP blocks (out of 8) for HB1, 28 multiplications will need to be done via LUT. 15–18 bits × 15–18 bits multiplication (15-bit PCM word size, but give or take) requires roughly 50 LUTs --> 28*50=1400 LUTs
        - Total: **1400 LUTs** at worst case
    + HB2: 3x
        - Adders: 48 total taps --> 24 nonzero coefficients, where each shift/adder is around 5 LUTs = 120 LUTs
        - Multiplication: Using the last 4 DSP blocks, 24-4=20 multipliers left --> 20*50=1000 LUTs
        - Total: **1000 LUTs** at worst case
* FIR Filter:
    + All error calculations are met, so FIR can be made up of precise and small number of taps. Overall, the multiplication count will be small.
    + Adding: Around 16-32 taps, where 2-4 LUTs per tap = 248 LUTs
        - Less LUTs per tap becuase of lower sample rate after decimation
    + Multiplication: No DSP blocks, 50 LUT per multiplication --> 50 * 32 = 1600 LUTs
    + Overhead: 20% of preliminary cost = 300 LUTs
    + Total: **1900 LUTs**
* Overall Total: **4400 LUTs** out of iCE40UP5K's **5280 LUTs** available --> **83%**. 
    + A little high, but this is considering worst case; in reality, we will be implementing shift-adding as first priority (rather than multiplication).
    + Using all 8 DSP blocks provided by iCE40UP5K.
    + We can decrease LUT usage by decreasing tap counts as long as our error margins allow it.
    + We can allocate DSPs within Lattice Radiant to handle the largest or tightest coefficients instead and decrease LUT usage.

#### FFT Parameters
Sample Rate (from FPGA’s decimation) [$f_S$]: 16 kHz --> Bandwidth = 8 kHz  
FFT Size [$N$]: 1024; balanced choice from [Table 4](#tbl-fft-sizes) below

Frequency resolution per FFT bin: 

* $f_S / N$ = Sample Rate / FFT Size
* The team is aiming for a range between 5-20 Hz/bin for musical range

Time resolution (Frame duration):

* $N / f_S$ = FFT Size / Sample Rate
* 50-100 ms latency is slowest without human notification

| **FFT Size**        | **Frequency Resolution**     | **Time Resolution**            |
|:-------------------:|:----------------------------:|:------------------------------:|
| 512                 | 15.625 Hz/bin                | 0.064 s = 64 ms                |
| [1024]{.underline}  | [7.8125 Hz/bin]{.underline}  | [0.128 s = 128 ms]{.underline} |
| 2048                | 3.90625 Hz/bin               | 0.256 s = 256 ms               |
: FFT Size Options {#tbl-fft-sizes}