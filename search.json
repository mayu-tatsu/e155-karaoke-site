[
  {
    "objectID": "project_proposal.html",
    "href": "project_proposal.html",
    "title": "Project Proposal",
    "section": "",
    "text": "This project seeks to emulate a karaoke machine by allowing a user to select from a set list of songs and displaying appropriately-timed lyrics accordingly. Once the song has finished, the project will grade the user’s performance — with both a numeric score and letter grade — based on how on-pitch they are.\nTo be more specific, this will be done by sampling the user’s singing with the FPGA and a MEMS PDM microphone, during which the former will perform decimation (see New FPGA Functionality) on the digital output of the mic, bringing the sample rate down to 16 kHz. Then, the FPGA will send this processed information to the MCU via SPI communication, so that it can further process such with FFT computations. It will also handle the storage of expected and detected notes throughout each song. Finally, the MCU will communicate with an LCD over I2C to display the corresponding lyrics of whatever song the user has chosen to sing and display the final score of the user’s performance."
  },
  {
    "objectID": "project_proposal.html#project-overview",
    "href": "project_proposal.html#project-overview",
    "title": "Project Proposal",
    "section": "",
    "text": "This project seeks to emulate a karaoke machine by allowing a user to select from a set list of songs and displaying appropriately-timed lyrics accordingly. Once the song has finished, the project will grade the user’s performance — with both a numeric score and letter grade — based on how on-pitch they are.\nTo be more specific, this will be done by sampling the user’s singing with the FPGA and a MEMS PDM microphone, during which the former will perform decimation (see New FPGA Functionality) on the digital output of the mic, bringing the sample rate down to 16 kHz. Then, the FPGA will send this processed information to the MCU via SPI communication, so that it can further process such with FFT computations. It will also handle the storage of expected and detected notes throughout each song. Finally, the MCU will communicate with an LCD over I2C to display the corresponding lyrics of whatever song the user has chosen to sing and display the final score of the user’s performance."
  },
  {
    "objectID": "project_proposal.html#specifications",
    "href": "project_proposal.html#specifications",
    "title": "Project Proposal",
    "section": "Specifications",
    "text": "Specifications\n\nDesign allows the user to choose a song through external hardware\nDesign detects input notes between A3 and roughly B5 (220 Hz to 1000 Hz)\nDesign scores the user’s singing by comparing detected and expected notes\nDisplays properly-timed lyrics/notes on an LCD screen\nLCD display does not flicker"
  },
  {
    "objectID": "project_proposal.html#project-management",
    "href": "project_proposal.html#project-management",
    "title": "Project Proposal",
    "section": "Project Management",
    "text": "Project Management\n\nBill of Materials\n\n\n\n\n\n\nPart Name\nPart Number\nQuantity\nPrice\nVendor\n\n\n\n\nAdafruit PDM MEMS Microphone Breakout\nMP34DT01-M\n1\n$11.23 ($4.95 part, $6.28 shipping + tax)\nAdafruit\n\n\nHosyond I2C 2004 LCD Module\nHD44780U\n1\n$26.32 ($16.99 part, $6.99 shipping, $2.34 estimated tax)\nAmazon\n\n\nCapacitor\n100nF Ceramic Capacitor\n1\n$0\nStockroom\n\n\nTOTAL\n\n\n$37.55\n\n\n\n\n\n\nTable 1: Bill of materials\n\n\n\nNote that if the team discovers that they need any additional, basic resources (such as resistors, capacitors, etc.) later on in the project, these will be taken from either the Engineering Stockroom or Digital Lab at no cost.\n\n\nTimeline\n\n\n\n\n\n\n\n\n\n\n\n\nTask(s)\nDate\n\n\n\n\nProject proposal\nFinish project proposal\n10/16/25\n\n\n\nStart project\n10/30/25\n\n\n\nStudy PDM to PCM decimation\n11/6/25\n\n\nDesign review\nPrepare slides for design review\n11/7/25\n\n\n\nImplement new decimation FPGA functionality\n11/13/25\n\n\nMidpoint report and demo\nFinish midpoint report and prepare demo\n11/16/25\n\n\n\nDetect all input notes accurately with microphone\n11/20/25\n\n\n\nSynchronize LCD output notes/lyrics with song(s)\n11/27/25\n\n\n\nPolish off project’s final appearance\n12/3/25\n\n\nFinal checkoff\nFinish project completely\n12/5/25\n\n\nFinal report\nFinish final report\n12/7/25\n\n\nDemo day\n\n12/8/25\n\n\n\n\n\nTable 2: Rough timeline with key dates\n\n\n\n\n\nTask Delegation\n\n\n\n\n\n\n\n\n\n\nMayu\nQuinn\n\n\n\n\n\nStudy PDM to PCM decimation\n\n\nStudy PDM to PCM decimation\n\n\n\n\nStart FPGA code\n\n\nStart LCD code\nTranscribe song(s)\n\n\n\n\nCheck LCD code\n\n\nCheck FPGA code\n\n\n\n\nStudy FFT calculations and libraries\n\n\nStudy FFT calculations and libraries\n\n\n\n\nDecide on interrupts and timers for MCU\n\n\nDecide on interrupts and timers for MCU\n\n\n\n\nAssemble circuit\n\n\nCheck circuit\n\n\n\n\nWrite verification\n\n\nWrite verification\n\n\n\n\nWrite Documentation\n\n\nWrite Documentation\n\n\n\n\n\n\nTable 3: Task delegation\n\n\n\nOverall, the team hopes to complete the vast majority of the project’s tasks together, so as to receive an equal and holistic learning experience."
  },
  {
    "objectID": "project_proposal.html#design-details",
    "href": "project_proposal.html#design-details",
    "title": "Project Proposal",
    "section": "Design Details",
    "text": "Design Details\n\nNew MCU Functionality\nThe new MCU functionality intended to be used is the I2C interface peripheral, which will enable communication with the LCD.\n\n\nNew FPGA Functionality\nThe new FPGA functionality intended to be used is decimation. In short, decimation is a term in (digital) signal processing that describes the removal of samples so as to reduce the complexity of subsequent computations.\n\n\nNew Non-Trivial Hardware\nThe two new, non-trivial pieces of hardware that will be used in this project are the Hoysond LCD module and the Adafruit PDM microphone.\n\n\nRiskiest Element\nThe riskiest element of the project will likely be integrating the aforementioned PDM to PCM decimation on the FPGA, which involves CIC and FIR filters; at the moment, the team does not know anything about this, nor how to implement it, so it is hard to assess both the amount and difficulty of the workload before actually diving into it. It requires a decent amount of math and selectivity for it to function for the team’s purposes, which they will be learning along the way. The team will attempt to mitigate these risks by utilizing reference designs and validating incrementally on the FPGA."
  },
  {
    "objectID": "project_proposal.html#technical-documentation",
    "href": "project_proposal.html#technical-documentation",
    "title": "Project Proposal",
    "section": "Technical Documentation",
    "text": "Technical Documentation\n\nBlock Diagram\n\n\n\n\n\n\nFigure 1: Block diagram\n\n\n\nThe block diagram depicted in Figure 1 provides a general outline of all protocols and interfaces that the project will comprise.\n\n\nCalculations of Critical Parameters\n\nPDM to PCM Decimation Parameters (Filter Design)\nPage four of the MP34DT01-M datasheet gives the following values:\nClock (@ \\(Vdd=1.8V\\), \\(T=25\\degree C\\)) = 2.4 MHz (Min. 1 MHz, Max. 3.25 MHz)\nAOP (Acoustic Overload Point) = 120 dBSPL\nSNR (Signal-to-Noise Ratio) = 61 dB\nDynamic Range = SNR + (AOP - 94 dbSPL) = 61 dB + (120 dbSPL - 94 dbSPL) = 87 bB\n- Assuming that there is ~6 dB per bit (realistically 6.2 per bit but rounding down), the design will need a PCM word size of at least 15 bits to cover the full dynamic range of the microphone. (\\(87/6=14.5\\), round up to 15 bits)\nThus, the values the team decided on are:\nOutput Sample Rate: 16 kHz → Bandwidth / Nyquist: 8 kHz\n- Most fundamental frequencies and harmonics of human singing fall below 8 kHz, and setting the Nyquist value at 16 kHz comfortably covers this band. - This has a lower processing and memory cost compared to standard 48 kHz audio.\n- FFT frequency bins and time resolution are balanced at this sample rate for pitch detection and scoring (see below!).\nPDM Sample Rate: 2.304 MHz\n- Based on clock range: 1 - 3.25 MHz\n- Power of 2: Important for decimation ratio –&gt; Multi-stage decimation.\nDecimation Ratio: \\(2304 kHz / 16 kHz = 144\\)\n\n\n\n\n\n\nFigure 2: Frequency response diagram\n\n\n\nObserving the diagram provided in Figure 2 above, after 6 kHz, the frequency response starts becoming a lot more sensitive. It’s a pass until then, and then the transition band starts from there. Beyond 10 kHz, the frequency response data isn’t displayed, so assuming the worst case scenario, the stop band should start from there.\nPass-band: 0 - 6 kHz\nStop Band: 10 kHz\nSNR of Output Signal: 80 dB\n- Humans can’t detect signals beyond 70 dB. - Allowing for increased SNR deterioration (of around 7 dB from 87 dB), the team can balance out the computational usage to quality required for a karaoke machine.\nMax. Ripple: +/- 1 dB\n- Individual filters will need to have tighter specs than this overall maximum 1 dB ripple, so for less load, it’s relaxed compared to the high quality audio standard of 0.1 dB.\nStop Band Attenuation = 60 dB\n- Worst-case assumption: PDM noise above 8 kHz (Nyquist) = −40 dB per 16 kHz band\n# all Hz\nfPDM      = 2.304e6\nfPDM/2    = 1.152e6\nfs        = 16e3\nfs/2      = 8e3\n\nN_bands   = floor((1.152e6 - 8e3)/16e3) = 71\n\nSNR_before   = 87   # dB\nSNR_after    = 80   # dB\ndecimation_r = fPDM / fs = 144\n\nP_signal                      = 1                           # normalized signal power\nP_native_noise_before         = 10^(-87/10) = 1.9953e-9     # intrinsic mic noise power\nP_total_noise_allowed         = 10^(-80/10) = 1.0000e-8     # total noise after filtering\nP_aliasing_noise_allowed      = P_total_noise_allowed - P_native_noise_before\n                              = 8.0047e-9   # max allowed aliased noise after filtering\n\n# per-band assumption: -40 dB  (per 16-kHz band above 8 kHz)\nP_aliasing_noise_before_per_band = 10^(-40/10) = 0.0001\nP_aliasing_noise_before_total    = 0.P_aliasing_noise_before_per_band * N_bands = 0.0071\n\nA_stop_lin = 0.0071 / 8.0047e-9 = 8.873e5\nA_stop_db  = 10 * log10(A_stop_lin) = 59.5               # ~60 dB stop-band attenuation required \n\nLUT Usage\nPreliminary order-of-magnitude calculations are based on this blog, but will be tweaked later: Design of a Multi-Stage PDM to PCM Decimation Pipeline\nFollowing the 144 decimation ratio, CIC can handle a maximum of 12x decimation (the bulk of decimation) with four stages and has 0.056 dB passband ripple and 125.8 dB stopband attenuation. The team will use two cascaded half-band filters: HB1 with 4x decimation and HB2 3x. Each roughly has a ~0.02 dB passband ripple and 89 dB attenuation. At the end, a generic FIR filter minimizes ripple by having a flat passband that counteracts the CIC passband droop (“compensation filter”). It also enforces stopband attenuation to a value higher than 60 dB (already achieved!), and as with the role of an FIR filter, it has 1x decimation.\n\nCIC Filter (12x in 4 stages):\n\nUses only adders and delays, no multipliers.\nAdders: 1 LUT per 4-5 adder bits, 20 adder bits * 4 stages = 20 LUTs\n\n20 adder bits comes from = Input Bit Width + Stages * log_2(CIC Decimation Ratio) = \\(1+4*log_2(12) = 16\\), adding 4 guard bits.\n\nRegisters: 52 registers (FFs) where 1 FF = 1 LUT.\n\nComes from 4 stages, each with 1 integrator and 12 combs = 52 LUTs.\n\nOverhead: 20% of preliminary cost = 15 LUTs\nTotal: Roughly 90 LUTs\n\nHalf-Band Filters:\n\nUses multipliers but FPGA can optimize and conver them to shifters/adders since half of taps are zero & nonzero coefficients are usually multiples of 2.\nHB1: 4x\n\nConverting taps to shift-adding is most efficient, but some might not always be possible. Worst case scenario, all taps will be via multiplication.\nAdders: 64 total taps –&gt; 32 nonzero coefficients, where each shift/adder is around 5 LUTs = 160 LUTs\nMultiplication: Worst case all taps are required to use multiplication: we use 4 DSP blocks (out of 8) for HB1, 28 multiplications will need to be done via LUT. 15–18 bits × 15–18 bits multiplication (15-bit PCM word size, but give or take) requires roughly 50 LUTs –&gt; 28*50=1400 LUTs\nTotal: 1400 LUTs at worst case\n\nHB2: 3x\n\nAdders: 48 total taps –&gt; 24 nonzero coefficients, where each shift/adder is around 5 LUTs = 120 LUTs\nMultiplication: Using the last 4 DSP blocks, 24-4=20 multipliers left –&gt; 20*50=1000 LUTs\nTotal: 1000 LUTs at worst case\n\n\nFIR Filter:\n\nAll error calculations are met, so FIR can be made up of precise and small number of taps. Overall, the multiplication count will be small.\nAdding: Around 16-32 taps, where 2-4 LUTs per tap = 248 LUTs\n\nLess LUTs per tap becuase of lower sample rate after decimation\n\nMultiplication: No DSP blocks, 50 LUT per multiplication –&gt; 50 * 32 = 1600 LUTs\nOverhead: 20% of preliminary cost = 300 LUTs\nTotal: 1900 LUTs\n\nOverall Total: 4400 LUTs out of iCE40UP5K’s 5280 LUTs available –&gt; 83%.\n\nA little high, but this is considering worst case; in reality, we will be implementing shift-adding as first priority (rather than multiplication).\nUsing all 8 DSP blocks provided by iCE40UP5K.\nWe can decrease LUT usage by decreasing tap counts as long as our error margins allow it.\nWe can allocate DSPs within Lattice Radiant to handle the largest or tightest coefficients instead and decrease LUT usage.\n\n\n\n\n\nFFT Parameters\nSample Rate (from FPGA’s decimation) [\\(f_S\\)]: 16 kHz\nFFT Size [\\(N\\)]: 2048; balanced choice from Table 4 below\nFrequency resolution per FFT bin:\n\n\\(f_S / N\\) = Sample Rate / FFT Size\nThe team is aiming for a range between 5-20 Hz/bin for musical range\n\nTime resolution (Frame duration):\n\n\\(N / f_S\\) = FFT Size / Sample Rate\n50-100 ms latency is slowest without human notification\n\n\n\n\n\n\n\n\n\n\n\n\nFFT Size\nFrequency Resolution\nTime Resolution\n\n\n\n\n1024\n15.625 Hz/bin\n0.064 s = 64 ms\n\n\n2048\n7.8125 Hz/bin\n0.128 s = 128 ms\n\n\n4096\n3.90625 Hz/bin\n0.256 s = 256 ms\n\n\n\n\n\nTable 4: FFT Size Options"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "E155 Karaoke Final Project",
    "section": "",
    "text": "Quinn Miyamoto (left) is a junior engineering major at Harvey Mudd College. More specifically, she is interested in digital electronics and mechanical design. So far, she has completed courses pertaining to computer architecture, electricity and magnetism, and system-on-chip design. She has a Level Two CAD certification in Rhino, and works as a Makerspace steward for Harvey Mudd College, with a certification to teach users welding. When she is not working, you can find her reading manga/manhwa, binging bad Netflix shows, gaming, or rock-climbing.\nMayu Tatsumi (right) is a junior studying Engineering at Harvey Mudd College. She is interested in working in the camera and lighting industries and would like to become involved as an electrical engineer. She has prior experience working as a Systems Control intern specifically working on embedded systems and writing C firmware on the NXP i.MX8M processor. Outside of engineering, she is interested in movie & TV production, Formula 1, and gaming."
  },
  {
    "objectID": "index.html#about-the-team",
    "href": "index.html#about-the-team",
    "title": "E155 Karaoke Final Project",
    "section": "",
    "text": "Quinn Miyamoto (left) is a junior engineering major at Harvey Mudd College. More specifically, she is interested in digital electronics and mechanical design. So far, she has completed courses pertaining to computer architecture, electricity and magnetism, and system-on-chip design. She has a Level Two CAD certification in Rhino, and works as a Makerspace steward for Harvey Mudd College, with a certification to teach users welding. When she is not working, you can find her reading manga/manhwa, binging bad Netflix shows, gaming, or rock-climbing.\nMayu Tatsumi (right) is a junior studying Engineering at Harvey Mudd College. She is interested in working in the camera and lighting industries and would like to become involved as an electrical engineer. She has prior experience working as a Systems Control intern specifically working on embedded systems and writing C firmware on the NXP i.MX8M processor. Outside of engineering, she is interested in movie & TV production, Formula 1, and gaming."
  }
]